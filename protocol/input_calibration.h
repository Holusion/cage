/* Generated by wayland-scanner 1.21.0 */

#ifndef EXT_INPUT_DEVICE_CALIBRATION_UNSTABLE_V1_SERVER_PROTOCOL_H
#define EXT_INPUT_DEVICE_CALIBRATION_UNSTABLE_V1_SERVER_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-server.h"

#ifdef  __cplusplus
extern "C" {
#endif

struct wl_client;
struct wl_resource;

/**
 * @page page_ext_input_device_calibration_unstable_v1 The ext_input_device_calibration_unstable_v1 protocol
 * Protocol to handle input devices dynamic calibration
 *
 * @section page_desc_ext_input_device_calibration_unstable_v1 Description
 *
 * This protocol allows dynamic calibration of input devices by the clients.
 *
 * Typically absolute input devices (such as touchscreens) need to be mapped
 * to once specific output in case of multiple outputs setups. However the 
 * compositor may not have enough information to do this mapping. This protocol
 * allows client to make this decision using external knowledge.
 *
 * Warning! The protocol described in this file is experimental and
 * backward incompatible changes may be made. Backward compatible
 * changes may be added together with the corresponding interface
 * version bump.
 *
 * @section page_ifaces_ext_input_device_calibration_unstable_v1 Interfaces
 * - @subpage page_iface_ext_input_calibration_manager_v1 - manage input devices calibration
 * - @subpage page_iface_ext_input_device_v1 - compositor input device
 * @section page_copyright_ext_input_device_calibration_unstable_v1 Copyright
 * <pre>
 *
 * Copyright Â© 2024 Holusion SAS
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 * </pre>
 */
struct ext_input_calibration_manager_v1;
struct ext_input_device_v1;

#ifndef EXT_INPUT_CALIBRATION_MANAGER_V1_INTERFACE
#define EXT_INPUT_CALIBRATION_MANAGER_V1_INTERFACE
/**
 * @page page_iface_ext_input_calibration_manager_v1 ext_input_calibration_manager_v1
 * @section page_iface_ext_input_calibration_manager_v1_desc Description
 *
 * A global factory interface for input_device objects.
 * @section page_iface_ext_input_calibration_manager_v1_api API
 * See @ref iface_ext_input_calibration_manager_v1.
 */
/**
 * @defgroup iface_ext_input_calibration_manager_v1 The ext_input_calibration_manager_v1 interface
 *
 * A global factory interface for input_device objects.
 */
extern const struct wl_interface ext_input_calibration_manager_v1_interface;
#endif
#ifndef EXT_INPUT_DEVICE_V1_INTERFACE
#define EXT_INPUT_DEVICE_V1_INTERFACE
/**
 * @page page_iface_ext_input_device_v1 ext_input_device_v1
 * @section page_iface_ext_input_device_v1_desc Description
 *
 * An ext_input_device object represents an input device in the compositor.
 * @section page_iface_ext_input_device_v1_api API
 * See @ref iface_ext_input_device_v1.
 */
/**
 * @defgroup iface_ext_input_device_v1 The ext_input_device_v1 interface
 *
 * An ext_input_device object represents an input device in the compositor.
 */
extern const struct wl_interface ext_input_device_v1_interface;
#endif

/**
 * @ingroup iface_ext_input_calibration_manager_v1
 * @struct ext_input_calibration_manager_v1_interface
 */
struct ext_input_calibration_manager_v1_interface {
	/**
	 * destroy the ext_input_calibration_manager object
	 *
	 * Using this request a client can tell the server that it is not
	 * going to use the object anymore.
	 */
	void (*destroy)(struct wl_client *client,
			struct wl_resource *resource);
};

#define EXT_INPUT_CALIBRATION_MANAGER_V1_ADD 0
#define EXT_INPUT_CALIBRATION_MANAGER_V1_DONE 1

/**
 * @ingroup iface_ext_input_calibration_manager_v1
 */
#define EXT_INPUT_CALIBRATION_MANAGER_V1_ADD_SINCE_VERSION 1
/**
 * @ingroup iface_ext_input_calibration_manager_v1
 */
#define EXT_INPUT_CALIBRATION_MANAGER_V1_DONE_SINCE_VERSION 1

/**
 * @ingroup iface_ext_input_calibration_manager_v1
 */
#define EXT_INPUT_CALIBRATION_MANAGER_V1_DESTROY_SINCE_VERSION 1

/**
 * @ingroup iface_ext_input_calibration_manager_v1
 * Sends an add event to the client owning the resource.
 * @param resource_ The client's resource
 * @param id the new input device
 */
static inline void
ext_input_calibration_manager_v1_send_add(struct wl_resource *resource_, struct wl_resource *id)
{
	wl_resource_post_event(resource_, EXT_INPUT_CALIBRATION_MANAGER_V1_ADD, id);
}

/**
 * @ingroup iface_ext_input_calibration_manager_v1
 * Sends an done event to the client owning the resource.
 * @param resource_ The client's resource
 */
static inline void
ext_input_calibration_manager_v1_send_done(struct wl_resource *resource_)
{
	wl_resource_post_event(resource_, EXT_INPUT_CALIBRATION_MANAGER_V1_DONE);
}

#ifndef EXT_INPUT_DEVICE_V1_ERROR_ENUM
#define EXT_INPUT_DEVICE_V1_ERROR_ENUM
enum ext_input_device_v1_error {
	/**
	 * requested output name was not found
	 */
	EXT_INPUT_DEVICE_V1_ERROR_NO_SUCH_OUTPUT = 1,
	/**
	 * could not match the requested boundaries
	 */
	EXT_INPUT_DEVICE_V1_ERROR_BAD_BOUNDARIES = 2,
	/**
	 * request sent after configuration has been applied or tested
	 */
	EXT_INPUT_DEVICE_V1_ERROR_ALREADY_USED = 3,
};
#endif /* EXT_INPUT_DEVICE_V1_ERROR_ENUM */

#ifndef EXT_INPUT_DEVICE_V1_TYPES_ENUM
#define EXT_INPUT_DEVICE_V1_TYPES_ENUM
enum ext_input_device_v1_types {
	/**
	 * keyboard device
	 */
	EXT_INPUT_DEVICE_V1_TYPES_KEYBOARD = 0,
	/**
	 * pointer (typ. mouse) device
	 */
	EXT_INPUT_DEVICE_V1_TYPES_POINTER = 1,
	/**
	 * touchscreen / trackpad device
	 */
	EXT_INPUT_DEVICE_V1_TYPES_TOUCH = 2,
	/**
	 * tablet tool device
	 */
	EXT_INPUT_DEVICE_V1_TYPES_TABLET_TOOL = 3,
	/**
	 * tablet pad device
	 */
	EXT_INPUT_DEVICE_V1_TYPES_TABLET_PAD = 4,
	/**
	 * switch device
	 */
	EXT_INPUT_DEVICE_V1_TYPES_SWITCH = 5,
};
#endif /* EXT_INPUT_DEVICE_V1_TYPES_ENUM */

/**
 * @ingroup iface_ext_input_device_v1
 * @struct ext_input_device_v1_interface
 */
struct ext_input_device_v1_interface {
	/**
	 * release the ext_input_device object
	 *
	 * Using this request a client can tell the server that it is not
	 * going to use the object anymore.
	 */
	void (*release)(struct wl_client *client,
			struct wl_resource *resource);
	/**
	 * map the input device to a box
	 *
	 * Asks the compositor to map the input device's absolute
	 * coordinates to a rectangle in output space
	 * @param width width in pixels of the box
	 * @param height width in pixels of the box
	 * @param x x position of the box
	 * @param y y position of the box
	 */
	void (*map_to_region)(struct wl_client *client,
			      struct wl_resource *resource,
			      int32_t width,
			      int32_t height,
			      int32_t x,
			      int32_t y);
	/**
	 * map the input device to an output device
	 *
	 * Asks the compositor to map the input device's absolute
	 * coordinates to an output device's on-screen position.
	 *
	 * The output name should be the value reported by xdg_output.name
	 * and zwlr_output_head_v1.name
	 * @param output output name to map to
	 */
	void (*map_to_output)(struct wl_client *client,
			      struct wl_resource *resource,
			      const char *output);
};

#define EXT_INPUT_DEVICE_V1_REMOVED 0
#define EXT_INPUT_DEVICE_V1_NAME 1
#define EXT_INPUT_DEVICE_V1_TYPE 2

/**
 * @ingroup iface_ext_input_device_v1
 */
#define EXT_INPUT_DEVICE_V1_REMOVED_SINCE_VERSION 1
/**
 * @ingroup iface_ext_input_device_v1
 */
#define EXT_INPUT_DEVICE_V1_NAME_SINCE_VERSION 1
/**
 * @ingroup iface_ext_input_device_v1
 */
#define EXT_INPUT_DEVICE_V1_TYPE_SINCE_VERSION 1

/**
 * @ingroup iface_ext_input_device_v1
 */
#define EXT_INPUT_DEVICE_V1_RELEASE_SINCE_VERSION 1
/**
 * @ingroup iface_ext_input_device_v1
 */
#define EXT_INPUT_DEVICE_V1_MAP_TO_REGION_SINCE_VERSION 1
/**
 * @ingroup iface_ext_input_device_v1
 */
#define EXT_INPUT_DEVICE_V1_MAP_TO_OUTPUT_SINCE_VERSION 1

/**
 * @ingroup iface_ext_input_device_v1
 * Sends an removed event to the client owning the resource.
 * @param resource_ The client's resource
 */
static inline void
ext_input_device_v1_send_removed(struct wl_resource *resource_)
{
	wl_resource_post_event(resource_, EXT_INPUT_DEVICE_V1_REMOVED);
}

/**
 * @ingroup iface_ext_input_device_v1
 * Sends an name event to the client owning the resource.
 * @param resource_ The client's resource
 * @param name input name
 */
static inline void
ext_input_device_v1_send_name(struct wl_resource *resource_, const char *name)
{
	wl_resource_post_event(resource_, EXT_INPUT_DEVICE_V1_NAME, name);
}

/**
 * @ingroup iface_ext_input_device_v1
 * Sends an type event to the client owning the resource.
 * @param resource_ The client's resource
 * @param type input type
 */
static inline void
ext_input_device_v1_send_type(struct wl_resource *resource_, int32_t type)
{
	wl_resource_post_event(resource_, EXT_INPUT_DEVICE_V1_TYPE, type);
}

#ifdef  __cplusplus
}
#endif

#endif
